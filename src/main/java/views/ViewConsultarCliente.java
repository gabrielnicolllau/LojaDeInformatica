package views;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import model.Cliente;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sqlDAO.ClienteDAO;

/**
 * Interface gráfica para consulta de clientes.
 * Permite inserir, alterar, excluir e visulaizar registros de clientes.
 * 
 * @author caroline.csaldanha
 * @see model.Cliente
 * @see sqlDAO.ClienteDAO
 */


public class ViewConsultarCliente extends javax.swing.JFrame {

    /** Lista de clientes carregada do banco de dados. */
    List<Cliente> listaDeClientes = new ArrayList<>();
    
    /** tabela que exibe os clientes. */
    private DefaultTableModel tableModel;
    
    /**
     * Construtor. Inicializa os componentes da interface.
     */
    public ViewConsultarCliente() {

        initComponents();
        setLocationRelativeTo(null);
        tableModel = (DefaultTableModel) tblClientes.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        btnInserir = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        txtConsultar = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Email", "CPF", "Data de Nasc", "Sexo", "Celular", "Telefone", "Estado Civil", "CEP", "Endereço", "Nº", "Bairro", "Cidade", "UF"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblClientes);

        btnInserir.setBackground(new java.awt.Color(204, 255, 204));
        btnInserir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnInserir.setText("Inserir");
        btnInserir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });

        btnAlterar.setBackground(new java.awt.Color(204, 204, 204));
        btnAlterar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(255, 153, 135));
        btnExcluir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Consultar");

        btnBuscar.setBackground(new java.awt.Color(204, 204, 204));
        btnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        try {
            txtConsultar.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConsultarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addGap(22, 22, 22))
            .addComponent(jScrollPane1)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(btnBuscar)
                            .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * Abre a interface de cadastro de cliente ao clicar no botão "Inserir".
 * @param evt - evento de clique associada ao botão inserir.
 */
    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed
        ViewCadastro novaJanela = new ViewCadastro();
        novaJanela.setVisible(true);
        novaJanela.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnInserirActionPerformed
/**
 * Realiza a ação de alterar um cliente ao clicar no botão "Alterar".
 * @param evt - evento de clique associada ao botão alterar.
 */
    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        
        /**1º Passo:  Resgatar a linha e mandar para um objeto.*/
        int linhaSelecionada = tblClientes.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma linha para atualizar!", "Nenhuma Linha Selecionada", JOptionPane.WARNING_MESSAGE);
            return; /**Sai do método se nenhuma linha foi selecionada.*/
        }

        /**2º Passo: acessar a camada Model da tabela.*/
        DefaultTableModel modelo = (DefaultTableModel) tblClientes.getModel();

        /**3º resgatar valores da linha selecionada.*/
        int idSelecionado = Integer.parseInt(modelo.getValueAt(linhaSelecionada, 0).toString());
        String nomeSelecionado = modelo.getValueAt(linhaSelecionada, 1).toString();
        String emailSelecionado = modelo.getValueAt(linhaSelecionada, 2).toString();
        String cpfSelecionado = modelo.getValueAt(linhaSelecionada, 3).toString();
        String sexoSelecionado = modelo.getValueAt(linhaSelecionada, 5).toString();
        String celularSelecionado = modelo.getValueAt(linhaSelecionada, 6).toString();
        String telefoneSelecionado = modelo.getValueAt(linhaSelecionada, 7).toString();
        String estadoCivilSelecionado = modelo.getValueAt(linhaSelecionada, 8).toString();
        String cepSelecionado = modelo.getValueAt(linhaSelecionada, 9).toString();
        String enderecoSelecionado = modelo.getValueAt(linhaSelecionada, 10).toString();
        String numeroSelecionado = modelo.getValueAt(linhaSelecionada, 11).toString();
        String bairroSelecionado = modelo.getValueAt(linhaSelecionada, 12).toString();
        String cidadeSelecionado = modelo.getValueAt(linhaSelecionada, 13).toString();
        String ufSelecionado = modelo.getValueAt(linhaSelecionada, 14).toString();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date dataNascSelecionada = null;
        try {
            dataNascSelecionada = sdf.parse(modelo.getValueAt(linhaSelecionada, 4).toString());
        } catch (ParseException ex) {
            ex.printStackTrace();
        }

        /**4º Passar dados para o objeto*/
        Cliente alterarCliente = new Cliente(idSelecionado, nomeSelecionado, emailSelecionado, cpfSelecionado, dataNascSelecionada, sexoSelecionado,
                celularSelecionado, telefoneSelecionado, estadoCivilSelecionado, cepSelecionado, enderecoSelecionado,
                numeroSelecionado, bairroSelecionado, cidadeSelecionado, ufSelecionado);

        /**5° Passar dados para a tela de alteracao*/
        ViewCadastro novaJanela = new ViewCadastro(alterarCliente);
        novaJanela.setVisible(true);
        novaJanela.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnAlterarActionPerformed

/**
 * Realiza a busca de clientes ao clicar no botão "Buscar".
 * @param evt - evento de clique associado ao botão "Buscar".
 */    
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        /** Buscar se nada for digitado na barra de pesquisa. */
        if (txtConsultar.getText().trim().replaceAll("[^0-9]", "").isEmpty()) {
            recarregarTabela();

        } else {
            String dadoBuscado = txtConsultar.getText().trim();

            /**Chamar o metodo na DAO que realiza a busca.*/
            ArrayList<Cliente> listaRetorno = ClienteDAO.buscarAlgo(dadoBuscado);

            DefaultTableModel modelo = (DefaultTableModel) tblClientes.getModel();
            modelo.setRowCount(0);

            for (Cliente dados : listaRetorno) {
                /**Atualiza a tabela. */
                modelo.addRow(new String[]{
                    //Pegar dados do objeto e passar a tabela
                    String.valueOf(dados.getIdCliente()),
                    String.valueOf(dados.getNome()),
                    String.valueOf(dados.getEmail()),
                    String.valueOf(dados.getCpf()),
                    String.valueOf(dados.getDataNasc()),
                    String.valueOf(dados.getSexo()),
                    String.valueOf(dados.getCelular()),
                    String.valueOf(dados.getTelefone()),
                    String.valueOf(dados.getEstadoCivil()),
                    String.valueOf(dados.getCep()),
                    String.valueOf(dados.getEndereço()),
                    String.valueOf(dados.getNumero()),
                    String.valueOf(dados.getBairro()),
                    String.valueOf(dados.getCidade()),
                    String.valueOf(dados.getUf())
                });
            }

        }
    }//GEN-LAST:event_btnBuscarActionPerformed

/**
 * Realiza a exclusão de um cliente ao clicar no botão "Excluir".
 * @param evt - evento de clique associado ao botão "Buscar".
 */
    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        /**1: Resgatar a linha e mandar para um objeto.*/
        int linhaSelecionada = tblClientes.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma linha para excluir!", "Nenhuma Linha Selecionada", JOptionPane.WARNING_MESSAGE);
            return; /**Sai do método se nenhuma linha for selecionada.*/
        }

        /**2: Acessar a camada Model da tabela.*/
        DefaultTableModel modelo = (DefaultTableModel) tblClientes.getModel();

        /**3: Resgatar valores da linha selecionada.*/
        int idSelecionado = Integer.parseInt(modelo.getValueAt(linhaSelecionada, 0).toString());

        /**4: Mandar o ID para a DAO excluir.*/
        boolean retorno = ClienteDAO.excluir(idSelecionado);

        if (retorno == true) {
            JOptionPane.showMessageDialog(null, "Cliente Excluido");
        } else {
            JOptionPane.showMessageDialog(null, "Nao foi possivel excluir esse cliente");
        }

        atualizarTabela();
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void txtConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConsultarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConsultarActionPerformed

/**
 * Método para atualizar a tabela ao consultar.
 */
    public void atualizarTabela() {
        /**Chamar a DAO para consultar clientes no banco.*/
        ArrayList<Cliente> listaRetorno = ClienteDAO.listar();

        /**Cada item da lista será adicionado a tabela.*/
        DefaultTableModel modelo = (DefaultTableModel) tblClientes.getModel();
        modelo.setRowCount(0);

        for (Cliente dados : listaRetorno) {
            modelo.addRow(new String[]{
                String.valueOf(dados.getIdCliente()),
                String.valueOf(dados.getNome()),
                String.valueOf(dados.getEmail()),
                String.valueOf(dados.getCpf()),
                String.valueOf(dados.getDataNasc()),
                String.valueOf(dados.getSexo()),
                String.valueOf(dados.getCelular()),
                String.valueOf(dados.getTelefone()),
                String.valueOf(dados.getEstadoCivil()),
                String.valueOf(dados.getCep()),
                String.valueOf(dados.getEndereço()),
                String.valueOf(dados.getNumero()),
                String.valueOf(dados.getBairro()),
                String.valueOf(dados.getCidade()),
                String.valueOf(dados.getUf())
            });
        }
    }

/**
 * Recarrega a tabela com os dados mais recentes.
 */    
    public void recarregarTabela() {
        
        /**Chamar a DAO para consultar clientes no banco.*/
        ArrayList<Cliente> lista = ClienteDAO.listar();
        
        /**Cada item da lista será adicionado a tabela.*/
        DefaultTableModel modelo = (DefaultTableModel) tblClientes.getModel();
        modelo.setRowCount(0);

        for (Cliente dados : lista) {
            modelo.addRow(new String[]{
                String.valueOf(dados.getIdCliente()),
                String.valueOf(dados.getNome()),
                String.valueOf(dados.getEmail()),
                String.valueOf(dados.getCpf()),
                String.valueOf(dados.getDataNasc()),
                String.valueOf(dados.getSexo()),
                String.valueOf(dados.getCelular()),
                String.valueOf(dados.getTelefone()),
                String.valueOf(dados.getEstadoCivil()),
                String.valueOf(dados.getCep()),
                String.valueOf(dados.getEndereço()),
                String.valueOf(dados.getNumero()),
                String.valueOf(dados.getBairro()),
                String.valueOf(dados.getCidade()),
                String.valueOf(dados.getUf())
            });
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewConsultarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewConsultarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewConsultarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewConsultarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewConsultarCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnInserir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Panel panel1;
    private javax.swing.JTable tblClientes;
    private javax.swing.JFormattedTextField txtConsultar;
    // End of variables declaration//GEN-END:variables

}
